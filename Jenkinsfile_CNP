#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "rd"
def component = "profile-sync"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-rd-professional-api', 'S2S_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)

    enableDbMigration('rd')
    disableLegacyDeployment()
    env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    enableAksStagingDeployment()

    // Sync demo and perftest with master branch
    syncBranchesWithMaster(branchesToSync)

    after('integrationTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('integrationTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    enablePactAs([
        AppPipelineDsl.PactRoles.CONSUMER
    ])
}
